{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d1bec57d-463a-4abe-b9e3-f212f90dbf5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x179bf260290>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from dash import Dash, dcc, html, Input, Output, State\n",
    "import dash_bootstrap_components as dbc\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "import re\n",
    "import io\n",
    "import xlsxwriter\n",
    "from docx import Document\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "\n",
    "# إعداد الاتصال بقاعدة البيانات باستخدام SQLAlchemy\n",
    "connection_string = \"mssql+pyodbc://PDASYNC:PDASYNC@52.174.138.11/SBDBLIVE2?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes\"\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "# جلب البيانات من قاعدة البيانات\n",
    "query_warehouse = \"\"\"\n",
    "SELECT [BUID],\n",
    "      [WarehouseName],\n",
    "      [ItemID],\n",
    "      [StockByCarton],\n",
    "      [TotalSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverViewbyBUID];\n",
    "\"\"\"\n",
    "\n",
    "query_sales = \"\"\"\n",
    "SELECT [WAREHOUSEID],\n",
    "      [WarehouseName],\n",
    "      [ITEMID],\n",
    "      [StockByCarton],\n",
    "      [AvgSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverView];\n",
    "\"\"\"\n",
    "\n",
    "df_warehouse = pd.read_sql(query_warehouse, engine)\n",
    "df_sales = pd.read_sql(query_sales, engine)\n",
    "\n",
    "# قائمة بأسماء المندوبين والفروع التي نريد إزالتها\n",
    "salesman_names = ['هيثم فاروق فولي', 'اسم مندوب آخر', 'اسم مندوب آخر 2']\n",
    "branch_names = df_warehouse['BUIDName'].unique().tolist()\n",
    "\n",
    "def remove_names(item_name, names_list):\n",
    "    for name in names_list:\n",
    "        # استخدام التعبير المنتظم لإزالة الأسماء بشكل دقيق\n",
    "        item_name = re.sub(r'\\b' + re.escape(name) + r'\\b', '', item_name).strip()\n",
    "    return item_name\n",
    "\n",
    "# معالجة عمود ItemNameE لإزالة أسماء المندوبين والفروع\n",
    "df_warehouse['ItemNameE'] = df_warehouse['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "df_sales['ItemNameE'] = df_sales['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "\n",
    "# إعداد واجهة المستخدم باستخدام Dash\n",
    "app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])\n",
    "\n",
    "def generate_progress_bar(row):\n",
    "    days_of_stock = row['DaysOfStock']\n",
    "    if days_of_stock <= 2:\n",
    "        color = 'danger'\n",
    "    elif days_of_stock <= 5:\n",
    "        color = 'warning'\n",
    "    else:\n",
    "        color = 'success'\n",
    "    return html.Div([\n",
    "        html.H6(f\"{row['ItemNameE']} in {row['WarehouseName']}\"),\n",
    "        dbc.Progress(value=days_of_stock, max=10, color=color, className=\"mb-3\", label=f\"{days_of_stock} days\")\n",
    "    ])\n",
    "\n",
    "app.layout = dbc.Container([\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H1(\"Warehouse and Sales Stock Dashboard\"), className=\"mb-2\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H6(\"Analyze and manage warehouse and sales stocks effectively.\"), className=\"mb-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H5(\"Stock Status in Sites\"), className=\"mb-2 mt-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(dcc.Dropdown(\n",
    "            id='buid-dropdown',\n",
    "            options=[{'label': name, 'value': name} for name in df_warehouse['BUIDName'].unique()],\n",
    "            placeholder=\"Select a BUID Name\",\n",
    "        ), width=12)\n",
    "    ]),\n",
    "    dbc.Row(id='warehouse-progress-bars-site', className=\"mt-4\"),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H5(\"Stock Status by Salesman\"), className=\"mb-2 mt-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(dcc.Dropdown(\n",
    "            id='warehouseid-dropdown',\n",
    "            options=[],  # سيتم تحديث الخيارات بناءً على BUID المختار\n",
    "            placeholder=\"Select a Warehouse Name\",\n",
    "        ), width=12)\n",
    "    ]),\n",
    "    dbc.Row(id='warehouse-progress-bars-salesman', className=\"mt-4\"),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H5(\"Download Data\"), className=\"mb-2 mt-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(dbc.Button(\"Download as Excel\", id=\"btn-download-excel\", color=\"primary\"), width=4),\n",
    "        dbc.Col(dbc.Button(\"Download as Word\", id=\"btn-download-word\", color=\"primary\"), width=4),\n",
    "        dbc.Col(dbc.Button(\"Download as PDF\", id=\"btn-download-pdf\", color=\"primary\"), width=4)\n",
    "    ]),\n",
    "    dcc.Download(id=\"download-dataframe-xlsx\"),\n",
    "    dcc.Download(id=\"download-dataframe-docx\"),\n",
    "    dcc.Download(id=\"download-dataframe-pdf\")\n",
    "], fluid=True)\n",
    "\n",
    "@app.callback(\n",
    "    Output('warehouse-progress-bars-site', 'children'),\n",
    "    Input('buid-dropdown', 'value')\n",
    ")\n",
    "def update_warehouse_progress_bars_site(selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return []\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    return [generate_progress_bar(row) for _, row in filtered_df.iterrows()]\n",
    "\n",
    "@app.callback(\n",
    "    Output('warehouseid-dropdown', 'options'),\n",
    "    Input('buid-dropdown', 'value')\n",
    ")\n",
    "def update_salesman_dropdown(selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return []\n",
    "    filtered_sales = df_sales[df_sales['BUIDName'] == selected_buid_name]\n",
    "    return [{'label': name, 'value': name} for name in filtered_sales['WarehouseName'].unique()]\n",
    "\n",
    "@app.callback(\n",
    "    Output('warehouse-progress-bars-salesman', 'children'),\n",
    "    Input('warehouseid-dropdown', 'value'),\n",
    "    State('buid-dropdown', 'value')\n",
    ")\n",
    "def update_warehouse_progress_bars_salesman(selected_warehouse_name, selected_buid_name):\n",
    "    if selected_warehouse_name is None or selected_buid_name is None:\n",
    "        return []\n",
    "    filtered_df = df_sales[(df_sales['BUIDName'] == selected_buid_name) & (df_sales['WarehouseName'] == selected_warehouse_name)]\n",
    "    return [generate_progress_bar(row) for _, row in filtered_df.iterrows()]\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"download-dataframe-xlsx\", \"data\"),\n",
    "    Input(\"btn-download-excel\", \"n_clicks\"),\n",
    "    State('buid-dropdown', 'value'),\n",
    "    prevent_initial_call=True,\n",
    ")\n",
    "def func(n_clicks, selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    output = io.BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    filtered_df.to_excel(writer, sheet_name='Sheet1', index=False)\n",
    "    writer.save()\n",
    "    output.seek(0)\n",
    "    return dcc.send_bytes(output.getvalue(), \"data.xlsx\")\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"download-dataframe-docx\", \"data\"),\n",
    "    Input(\"btn-download-word\", \"n_clicks\"),\n",
    "    State('buid-dropdown', 'value'),\n",
    "    prevent_initial_call=True,\n",
    ")\n",
    "def func(n_clicks, selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    document = Document()\n",
    "    document.add_heading('Filtered Data', 0)\n",
    "    for index, row in filtered_df.iterrows():\n",
    "        document.add_paragraph(f\"{row['ItemNameE']} in {row['WarehouseName']} with {row['DaysOfStock']} days of stock\")\n",
    "    output = io.BytesIO()\n",
    "    document.save(output)\n",
    "    output.seek(0)\n",
    "    return dcc.send_bytes(output.getvalue(), \"data.docx\")\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"download-dataframe-pdf\", \"data\"),\n",
    "    Input(\"btn-download-pdf\", \"n_clicks\"),\n",
    "    State('buid-dropdown', 'value'),\n",
    "    prevent_initial_call=True,\n",
    ")\n",
    "def func(n_clicks, selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    output = io.BytesIO()\n",
    "    c = canvas.Canvas(output, pagesize=letter)\n",
    "    width, height = letter\n",
    "    y = height - 40\n",
    "    for index, row in filtered_df.iterrows():\n",
    "        text = f\"{row['ItemNameE']} in {row['WarehouseName']} with {row['DaysOfStock']} days of stock\"\n",
    "        c.drawString(30, y, text)\n",
    "        y -= 20\n",
    "        if y < 40:\n",
    "            c.showPage()\n",
    "            y = height - 40\n",
    "    c.save()\n",
    "    output.seek(0)\n",
    "    return dcc.send_bytes(output.getvalue(), \"data.pdf\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True, use_reloader=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bbf31116-9395-41ae-b33e-777bf5e9c463",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (1.30.0)\n",
      "Requirement already satisfied: pandas in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (2.1.4)\n",
      "Requirement already satisfied: sqlalchemy in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (2.0.25)\n",
      "Requirement already satisfied: openpyxl in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (3.0.10)\n",
      "Requirement already satisfied: python-docx in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (1.1.2)\n",
      "Requirement already satisfied: reportlab in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (4.2.0)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (5.0.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (1.6.2)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (4.2.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (8.1.7)\n",
      "Requirement already satisfied: importlib-metadata<8,>=1.4 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (7.0.1)\n",
      "Requirement already satisfied: numpy<2,>=1.19.3 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (1.26.4)\n",
      "Requirement already satisfied: packaging<24,>=16.8 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (23.1)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (10.2.0)\n",
      "Requirement already satisfied: protobuf<5,>=3.20 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (3.20.3)\n",
      "Requirement already satisfied: pyarrow>=6.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (14.0.2)\n",
      "Requirement already satisfied: python-dateutil<3,>=2.7.3 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.8.2)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.31.0)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (13.3.5)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (8.2.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (4.9.0)\n",
      "Requirement already satisfied: tzlocal<6,>=1.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.1)\n",
      "Requirement already satisfied: validators<1,>=0.2 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (0.18.2)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (3.1.37)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (0.8.0)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (6.3.3)\n",
      "Requirement already satisfied: watchdog>=2.1.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.1.6)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from pandas) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from pandas) (2023.3)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from sqlalchemy) (3.0.1)\n",
      "Requirement already satisfied: et_xmlfile in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from openpyxl) (1.1.0)\n",
      "Requirement already satisfied: lxml>=3.1.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from python-docx) (4.9.3)\n",
      "Requirement already satisfied: chardet in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from reportlab) (4.0.0)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.3)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.19.2)\n",
      "Requirement already satisfied: toolz in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from importlib-metadata<8,>=1.4->streamlit) (3.17.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from python-dateutil<3,>=2.7.3->streamlit) (1.16.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2024.2.2)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Requirement already satisfied: decorator>=3.4.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from validators<1,>=0.2->streamlit) (5.1.1)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.1.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.6)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from markdown-it-py<3.0.0,>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install streamlit pandas sqlalchemy openpyxl python-docx reportlab\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2a5884e2-9b63-4e5c-815b-3eea264d2930",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing stock_check_app.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile stock_check_app.py\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import re\n",
    "from io import BytesIO\n",
    "from docx import Document\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# الاتصال بقاعدة البيانات\n",
    "connection_string = \"mssql+pyodbc://PDASYNC:PDASYNC@52.174.138.11/SBDBLIVE2?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes\"\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "# جلب البيانات من SQL Server\n",
    "query_warehouse = \"\"\"\n",
    "SELECT [BUID],\n",
    "      [WarehouseName],\n",
    "      [ItemID],\n",
    "      [StockByCarton],\n",
    "      [TotalSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverViewbyBUID];\n",
    "\"\"\"\n",
    "\n",
    "query_sales = \"\"\"\n",
    "SELECT [WAREHOUSEID],\n",
    "      [WarehouseName],\n",
    "      [ITEMID],\n",
    "      [StockByCarton],\n",
    "      [AvgSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverView];\n",
    "\"\"\"\n",
    "\n",
    "df_warehouse = pd.read_sql(query_warehouse, engine)\n",
    "df_sales = pd.read_sql(query_sales, engine)\n",
    "\n",
    "# إزالة الأسماء من ItemNameE\n",
    "salesman_names = ['هيثم فاروق فولي', 'اسم مندوب آخر', 'اسم مندوب آخر 2']\n",
    "branch_names = df_warehouse['BUIDName'].unique().tolist()\n",
    "\n",
    "def remove_names(item_name, names_list):\n",
    "    for name in names_list:\n",
    "        item_name = re.sub(r'\\b' + re.escape(name) + r'\\b', '', item_name).strip()\n",
    "    return item_name\n",
    "\n",
    "df_warehouse['ItemNameE'] = df_warehouse['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "df_sales['ItemNameE'] = df_sales['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "\n",
    "# تخطيط تطبيق Streamlit\n",
    "st.title(\"لوحة التحكم لمخزون المستودعات والمبيعات\")\n",
    "\n",
    "buid_names = df_warehouse['BUIDName'].unique()\n",
    "selected_buid_name = st.selectbox(\"اختر اسم BUID\", buid_names)\n",
    "\n",
    "if selected_buid_name:\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "\n",
    "    for _, row in filtered_df.iterrows():\n",
    "        st.write(f\"### {row['ItemNameE']} في {row['WarehouseName']}\")\n",
    "        # تطبيع DaysOfStock إلى النطاق [0.0، 1.0]\n",
    "        st.progress(min(row['DaysOfStock'] / 100, 1.0))\n",
    "\n",
    "def to_excel(df):\n",
    "    output = BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    df.to_excel(writer, index=False, sheet_name='Sheet1')\n",
    "    writer.save()\n",
    "    processed_data = output.getvalue()\n",
    "    return processed_data\n",
    "\n",
    "def to_word(df):\n",
    "    document = Document()\n",
    "    document.add_heading('البيانات المصفاة', 0)\n",
    "    for _, row in df.iterrows():\n",
    "        document.add_paragraph(f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\")\n",
    "    output = BytesIO()\n",
    "    document.save(output)\n",
    "    return output.getvalue()\n",
    "\n",
    "def to_pdf(df):\n",
    "    output = BytesIO()\n",
    "    c = canvas.Canvas(output, pagesize=letter)\n",
    "    width, height = letter\n",
    "    y = height - 40\n",
    "    for _, row in df.iterrows():\n",
    "        text = f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\"\n",
    "        c.drawString(30, y, text)\n",
    "        y -= 20\n",
    "        if y < 40:\n",
    "            c.showPage()\n",
    "            y = height - 40\n",
    "    c.save()\n",
    "    output.seek(0)\n",
    "    return output.getvalue()\n",
    "\n",
    "if st.button('تحميل كملف Excel'):\n",
    "    st.download_button(label=\"تحميل ملف Excel\", data=to_excel(filtered_df), file_name=\"data.xlsx\")\n",
    "\n",
    "if st.button('تحميل كملف Word'):\n",
    "    st.download_button(label=\"تحميل ملف Word\", data=to_word(filtered_df), file_name=\"data.docx\")\n",
    "\n",
    "if st.button('تحميل كملف PDF'):\n",
    "    st.download_button(label=\"تحميل ملف PDF\", data=to_pdf(filtered_df), file_name=\"data.pdf\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d3921061-42ff-4b65-814e-3058f793062b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\khaled.mahmoud\\AppData\\Local\\anaconda3\\Scripts\\streamlit-script.py\", line 6, in <module>\n",
      "    from streamlit.cli import main\n",
      "ModuleNotFoundError: No module named 'streamlit.cli'\n"
     ]
    }
   ],
   "source": [
    "!streamlit run stock_check_app.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "42faf295-6163-4924-9275-d2e6f72a07ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting stock_check_app.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile stock_check_app.py\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import re\n",
    "from io import BytesIO\n",
    "from docx import Document\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# الاتصال بقاعدة البيانات\n",
    "connection_string = \"mssql+pyodbc://PDASYNC:PDASYNC@52.174.138.11/SBDBLIVE2?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes\"\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "# جلب البيانات من SQL Server\n",
    "query_warehouse = \"\"\"\n",
    "SELECT [BUID],\n",
    "      [WarehouseName],\n",
    "      [ItemID],\n",
    "      [StockByCarton],\n",
    "      [TotalSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverViewbyBUID];\n",
    "\"\"\"\n",
    "\n",
    "query_sales = \"\"\"\n",
    "SELECT [WAREHOUSEID],\n",
    "      [WarehouseName],\n",
    "      [ITEMID],\n",
    "      [StockByCarton],\n",
    "      [AvgSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverView];\n",
    "\"\"\"\n",
    "\n",
    "df_warehouse = pd.read_sql(query_warehouse, engine)\n",
    "df_sales = pd.read_sql(query_sales, engine)\n",
    "\n",
    "# إزالة الأسماء من ItemNameE\n",
    "salesman_names = ['هيثم فاروق فولي', 'اسم مندوب آخر', 'اسم مندوب آخر 2']\n",
    "branch_names = df_warehouse['BUIDName'].unique().tolist()\n",
    "\n",
    "def remove_names(item_name, names_list):\n",
    "    for name in names_list:\n",
    "        item_name = re.sub(r'\\b' + re.escape(name) + r'\\b', '', item_name).strip()\n",
    "    return item_name\n",
    "\n",
    "df_warehouse['ItemNameE'] = df_warehouse['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "df_sales['ItemNameE'] = df_sales['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "\n",
    "# تخطيط تطبيق Streamlit\n",
    "st.title(\"لوحة التحكم لمخزون المستودعات والمبيعات\")\n",
    "\n",
    "buid_names = df_warehouse['BUIDName'].unique()\n",
    "selected_buid_name = st.selectbox(\"اختر اسم BUID\", buid_names)\n",
    "\n",
    "if selected_buid_name:\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "\n",
    "    for _, row in filtered_df.iterrows():\n",
    "        st.write(f\"### {row['ItemNameE']} في {row['WarehouseName']}\")\n",
    "        # تطبيع DaysOfStock إلى النطاق [0.0، 1.0]\n",
    "        st.progress(min(row['DaysOfStock'] / 100, 1.0))\n",
    "\n",
    "def to_excel(df):\n",
    "    output = BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    df.to_excel(writer, index=False, sheet_name='Sheet1')\n",
    "    writer.save()\n",
    "    processed_data = output.getvalue()\n",
    "    return processed_data\n",
    "\n",
    "def to_word(df):\n",
    "    document = Document()\n",
    "    document.add_heading('البيانات المصفاة', 0)\n",
    "    for _, row in df.iterrows():\n",
    "        document.add_paragraph(f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\")\n",
    "    output = BytesIO()\n",
    "    document.save(output)\n",
    "    return output.getvalue()\n",
    "\n",
    "def to_pdf(df):\n",
    "    output = BytesIO()\n",
    "    c = canvas.Canvas(output, pagesize=letter)\n",
    "    width, height = letter\n",
    "    y = height - 40\n",
    "    for _, row in df.iterrows():\n",
    "        text = f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\"\n",
    "        c.drawString(30, y, text)\n",
    "        y -= 20\n",
    "        if y < 40:\n",
    "            c.showPage()\n",
    "            y = height - 40\n",
    "    c.save()\n",
    "    output.seek(0)\n",
    "    return output.getvalue()\n",
    "\n",
    "if st.button('تحميل كملف Excel'):\n",
    "    st.download_button(label=\"تحميل ملف Excel\", data=to_excel(filtered_df), file_name=\"data.xlsx\")\n",
    "\n",
    "if st.button('تحميل كملف Word'):\n",
    "    st.download_button(label=\"تحميل ملف Word\", data=to_word(filtered_df), file_name=\"data.docx\")\n",
    "\n",
    "if st.button('تحميل كملف PDF'):\n",
    "    st.download_button(label=\"تحميل ملف PDF\", data=to_pdf(filtered_df), file_name=\"data.pdf\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "60e3ccb4-55d7-4646-86b9-c409e0f54914",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\khaled.mahmoud\\AppData\\Local\\anaconda3\\Scripts\\streamlit-script.py\", line 6, in <module>\n",
      "    from streamlit.cli import main\n",
      "ModuleNotFoundError: No module named 'streamlit.cli'\n"
     ]
    }
   ],
   "source": [
    "!streamlit run stock_check_app.py\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f65d9aab-6907-4a9f-b500-5b8675ed83fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (1.30.0)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (5.0.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (1.6.2)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (4.2.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (8.1.7)\n",
      "Requirement already satisfied: importlib-metadata<8,>=1.4 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (7.0.1)\n",
      "Requirement already satisfied: numpy<2,>=1.19.3 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (1.26.4)\n",
      "Requirement already satisfied: packaging<24,>=16.8 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (23.1)\n",
      "Requirement already satisfied: pandas<3,>=1.3.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.1.4)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (10.2.0)\n",
      "Requirement already satisfied: protobuf<5,>=3.20 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (3.20.3)\n",
      "Requirement already satisfied: pyarrow>=6.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (14.0.2)\n",
      "Requirement already satisfied: python-dateutil<3,>=2.7.3 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.8.2)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.31.0)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (13.3.5)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (8.2.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (4.9.0)\n",
      "Requirement already satisfied: tzlocal<6,>=1.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.1)\n",
      "Requirement already satisfied: validators<1,>=0.2 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (0.18.2)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (3.1.37)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (0.8.0)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (6.3.3)\n",
      "Requirement already satisfied: watchdog>=2.1.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from streamlit) (2.1.6)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.3)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.19.2)\n",
      "Requirement already satisfied: toolz in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from importlib-metadata<8,>=1.4->streamlit) (3.17.0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from python-dateutil<3,>=2.7.3->streamlit) (1.16.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2024.2.2)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Requirement already satisfied: decorator>=3.4.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from validators<1,>=0.2->streamlit) (5.1.1)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.1.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.6)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\khaled.mahmoud\\appdata\\local\\anaconda3\\lib\\site-packages (from markdown-it-py<3.0.0,>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "14153787-4998-4231-be03-0ffcc12a66f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-31 03:53:07.217 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\khaled.mahmoud\\AppData\\Local\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import re\n",
    "from io import BytesIO\n",
    "from docx import Document\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# الاتصال بقاعدة البيانات\n",
    "connection_string = \"mssql+pyodbc://PDASYNC:PDASYNC@52.174.138.11/SBDBLIVE2?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes\"\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "# جلب البيانات من SQL Server\n",
    "query_warehouse = \"\"\"\n",
    "SELECT [BUID],\n",
    "      [WarehouseName],\n",
    "      [ItemID],\n",
    "      [StockByCarton],\n",
    "      [TotalSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverViewbyBUID];\n",
    "\"\"\"\n",
    "\n",
    "query_sales = \"\"\"\n",
    "SELECT [WAREHOUSEID],\n",
    "      [WarehouseName],\n",
    "      [ITEMID],\n",
    "      [StockByCarton],\n",
    "      [AvgSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverView];\n",
    "\"\"\"\n",
    "\n",
    "df_warehouse = pd.read_sql(query_warehouse, engine)\n",
    "df_sales = pd.read_sql(query_sales, engine)\n",
    "\n",
    "# إزالة الأسماء من ItemNameE\n",
    "salesman_names = ['هيثم فاروق فولي', 'اسم مندوب آخر', 'اسم مندوب آخر 2']\n",
    "branch_names = df_warehouse['BUIDName'].unique().tolist()\n",
    "\n",
    "def remove_names(item_name, names_list):\n",
    "    for name in names_list:\n",
    "        item_name = re.sub(r'\\b' + re.escape(name) + r'\\b', '', item_name).strip()\n",
    "    return item_name\n",
    "\n",
    "df_warehouse['ItemNameE'] = df_warehouse['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "df_sales['ItemNameE'] = df_sales['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "\n",
    "# تخطيط تطبيق Streamlit\n",
    "st.title(\"لوحة التحكم لمخزون المستودعات والمبيعات\")\n",
    "\n",
    "buid_names = df_warehouse['BUIDName'].unique()\n",
    "selected_buid_name = st.selectbox(\"اختر اسم BUID\", buid_names)\n",
    "\n",
    "if selected_buid_name:\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "\n",
    "    for _, row in filtered_df.iterrows():\n",
    "        st.write(f\"### {row['ItemNameE']} في {row['WarehouseName']}\")\n",
    "        # تطبيع DaysOfStock إلى النطاق [0.0، 1.0]\n",
    "        st.progress(min(row['DaysOfStock'] / 100, 1.0))\n",
    "\n",
    "def to_excel(df):\n",
    "    output = BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    df.to_excel(writer, index=False, sheet_name='Sheet1')\n",
    "    writer.save()\n",
    "    processed_data = output.getvalue()\n",
    "    return processed_data\n",
    "\n",
    "def to_word(df):\n",
    "    document = Document()\n",
    "    document.add_heading('البيانات المصفاة', 0)\n",
    "    for _, row in df.iterrows():\n",
    "        document.add_paragraph(f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\")\n",
    "    output = BytesIO()\n",
    "    document.save(output)\n",
    "    return output.getvalue()\n",
    "\n",
    "def to_pdf(df):\n",
    "    output = BytesIO()\n",
    "    c = canvas.Canvas(output, pagesize=letter)\n",
    "    width, height = letter\n",
    "    y = height - 40\n",
    "    for _, row in df.iterrows():\n",
    "        text = f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\"\n",
    "        c.drawString(30, y, text)\n",
    "        y -= 20\n",
    "        if y < 40:\n",
    "            c.showPage()\n",
    "            y = height - 40\n",
    "    c.save()\n",
    "    output.seek(0)\n",
    "    return output.getvalue()\n",
    "\n",
    "if st.button('تحميل كملف Excel'):\n",
    "    st.download_button(label=\"تحميل ملف Excel\", data=to_excel(filtered_df), file_name=\"data.xlsx\")\n",
    "\n",
    "if st.button('تحميل كملف Word'):\n",
    "    st.download_button(label=\"تحميل ملف Word\", data=to_word(filtered_df), file_name=\"data.docx\")\n",
    "\n",
    "if st.button('تحميل كملف PDF'):\n",
    "    st.download_button(label=\"تحميل ملف PDF\", data=to_pdf(filtered_df), file_name=\"data.pdf\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "19ec3ef8-4d34-4ada-ba7d-5b6466453a0f",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3019435756.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[9], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    pip uninstall pyzmq\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "pip uninstall pyzmq\n",
    "pip install pyzmq\n",
    "pip uninstall streamlit\n",
    "pip install streamlit\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count":None,
   "id": "22950d07-105f-4450-a6e6-999d82dd618d",
   "metadata": {},
   "outputs": [],
   "source": [
    "pip uninstall pyzmq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count":None,
   "id": "f183bc36-ef3f-4dba-8946-1762b8864c63",
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install pyzmq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count":None,
   "id": "d1c2c7a2-9b10-4b36-880f-05a2760663ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import re\n",
    "from io import BytesIO\n",
    "from docx import Document\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# الاتصال بقاعدة البيانات\n",
    "connection_string = \"mssql+pyodbc://PDASYNC:PDASYNC@52.174.138.11/SBDBLIVE2?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes\"\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "# جلب البيانات من SQL Server\n",
    "query_warehouse = \"\"\"\n",
    "SELECT [BUID],\n",
    "      [WarehouseName],\n",
    "      [ItemID],\n",
    "      [StockByCarton],\n",
    "      [TotalSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverViewbyBUID];\n",
    "\"\"\"\n",
    "\n",
    "query_sales = \"\"\"\n",
    "SELECT [WAREHOUSEID],\n",
    "      [WarehouseName],\n",
    "      [ITEMID],\n",
    "      [StockByCarton],\n",
    "      [AvgSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverView];\n",
    "\"\"\"\n",
    "\n",
    "df_warehouse = pd.read_sql(query_warehouse, engine)\n",
    "df_sales = pd.read_sql(query_sales, engine)\n",
    "\n",
    "# إزالة الأسماء من ItemNameE\n",
    "salesman_names = ['هيثم فاروق فولي', 'اسم مندوب آخر', 'اسم مندوب آخر 2']\n",
    "branch_names = df_warehouse['BUIDName'].unique().tolist()\n",
    "\n",
    "def remove_names(item_name, names_list):\n",
    "    for name in names_list:\n",
    "        item_name = re.sub(r'\\b' + re.escape(name) + r'\\b', '', item_name).strip()\n",
    "    return item_name\n",
    "\n",
    "df_warehouse['ItemNameE'] = df_warehouse['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "df_sales['ItemNameE'] = df_sales['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "\n",
    "# تخطيط تطبيق Streamlit\n",
    "st.title(\"لوحة التحكم لمخزون المستودعات والمبيعات\")\n",
    "\n",
    "buid_names = df_warehouse['BUIDName'].unique()\n",
    "selected_buid_name = st.selectbox(\"اختر اسم BUID\", buid_names)\n",
    "\n",
    "if selected_buid_name:\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "\n",
    "    for _, row in filtered_df.iterrows():\n",
    "        st.write(f\"### {row['ItemNameE']} في {row['WarehouseName']}\")\n",
    "        # تطبيع DaysOfStock إلى النطاق [0.0، 1.0]\n",
    "        st.progress(min(row['DaysOfStock'] / 100, 1.0))\n",
    "\n",
    "def to_excel(df):\n",
    "    output = BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    df.to_excel(writer, index=False, sheet_name='Sheet1')\n",
    "    writer.save()\n",
    "    processed_data = output.getvalue()\n",
    "    return processed_data\n",
    "\n",
    "def to_word(df):\n",
    "    document = Document()\n",
    "    document.add_heading('البيانات المصفاة', 0)\n",
    "    for _, row in df.iterrows():\n",
    "        document.add_paragraph(f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\")\n",
    "    output = BytesIO()\n",
    "    document.save(output)\n",
    "    return output.getvalue()\n",
    "\n",
    "def to_pdf(df):\n",
    "    output = BytesIO()\n",
    "    c = canvas.Canvas(output, pagesize=letter)\n",
    "    width, height = letter\n",
    "    y = height - 40\n",
    "    for _, row in df.iterrows():\n",
    "        text = f\"{row['ItemNameE']} في {row['WarehouseName']} مع {row['DaysOfStock']} أيام من المخزون\"\n",
    "        c.drawString(30, y, text)\n",
    "        y -= 20\n",
    "        if y < 40:\n",
    "            c.showPage()\n",
    "            y = height - 40\n",
    "    c.save()\n",
    "    output.seek(0)\n",
    "    return output.getvalue()\n",
    "\n",
    "if st.button('تحميل كملف Excel'):\n",
    "    st.download_button(label=\"تحميل ملف Excel\", data=to_excel(filtered_df), file_name=\"data.xlsx\")\n",
    "\n",
    "if st.button('تحميل كملف Word'):\n",
    "    st.download_button(label=\"تحميل ملف Word\", data=to_word(filtered_df), file_name=\"data.docx\")\n",
    "\n",
    "if st.button('تحميل كملف PDF'):\n",
    "    st.download_button(label=\"تحميل ملف PDF\", data=to_pdf(filtered_df), file_name=\"data.pdf\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count":None,
   "id": "a4c89353-3276-4d93-96ba-9758469ff49e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, request, render_template, send_file\n",
    "import pandas as pd\n",
    "from io import BytesIO\n",
    "from sqlalchemy import create_engine\n",
    "from docx import Document\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "# إعداد الاتصال بقاعدة البيانات باستخدام SQLAlchemy\n",
    "connection_string = \"mssql+pyodbc://PDASYNC:PDASYNC@52.174.138.11/SBDBLIVE2?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes\"\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "# الصفحة الرئيسية لتحميل الملف\n",
    "@app.route('/')\n",
    "def upload_file():\n",
    "    return '''\n",
    "    <!doctype html>\n",
    "    <html lang=\"en\">\n",
    "      <head>\n",
    "        <meta charset=\"utf-8\">\n",
    "        <title>Upload Excel File</title>\n",
    "      </head>\n",
    "      <body>\n",
    "        <h1>Upload Excel File</h1>\n",
    "        <form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n",
    "          <input type=\"file\" name=\"file\" accept=\".xlsx\" required>\n",
    "          <input type=\"submit\" value=\"Upload\">\n",
    "        </form>\n",
    "      </body>\n",
    "    </html>\n",
    "    '''\n",
    "\n",
    "# معالجة الملف بعد رفعه\n",
    "@app.route('/upload', methods=['POST'])\n",
    "def upload():\n",
    "    if 'file' not in request.files:\n",
    "        return \"No file part\"\n",
    "    file = request.files['file']\n",
    "    if file.filename == '':\n",
    "        return \"No selected file\"\n",
    "    if file:\n",
    "        df = pd.read_excel(file)\n",
    "        \n",
    "        # هنا يمكنك تنفيذ العمليات التي تريدها على البيانات\n",
    "        # سأقوم بإضافة عمود جديد كمثال\n",
    "        df['New_Column'] = df.iloc[:, 0] * 2\n",
    "\n",
    "        # حفظ الملف المعدل في الذاكرة\n",
    "        output = BytesIO()\n",
    "        writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "        df.to_excel(writer, index=False, sheet_name='Sheet1')\n",
    "        writer.save()\n",
    "        output.seek(0)\n",
    "\n",
    "        return send_file(output, attachment_filename=\"modified_data.xlsx\", as_attachment=True)\n",
    "\n",
    "@app.route('/database_report', methods=['GET'])\n",
    "def database_report():\n",
    "    query_warehouse = \"\"\"\n",
    "    SELECT [BUID],\n",
    "          [WarehouseName],\n",
    "          [ItemID],\n",
    "          [StockByCarton],\n",
    "          [TotalSalesByCarton],\n",
    "          [DaysOfStock],\n",
    "          [BrandNameE],\n",
    "          [MasterBrandName],\n",
    "          [ItemNameE],\n",
    "          [BUIDName]\n",
    "    FROM [SBDBLIVE2].[dbo].[StockTurnoverViewbyBUID];\n",
    "    \"\"\"\n",
    "\n",
    "    df_warehouse = pd.read_sql(query_warehouse, engine)\n",
    "    \n",
    "    # معالجة البيانات حسب حاجتك هنا\n",
    "    # سأقوم بإزالة بعض الأسماء كمثال\n",
    "    salesman_names = ['هيثم فاروق فولي', 'اسم مندوب آخر', 'اسم مندوب آخر 2']\n",
    "    branch_names = df_warehouse['BUIDName'].unique().tolist()\n",
    "\n",
    "    def remove_names(item_name, names_list):\n",
    "        for name in names_list:\n",
    "            item_name = re.sub(r'\\b' + re.escape(name) + r'\\b', '', item_name).strip()\n",
    "        return item_name\n",
    "\n",
    "    df_warehouse['ItemNameE'] = df_warehouse['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "\n",
    "    # حفظ الملف المعدل في الذاكرة\n",
    "    output = BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    df_warehouse.to_excel(writer, index=False, sheet_name='Sheet1')\n",
    "    writer.save()\n",
    "    output.seek(0)\n",
    "\n",
    "    return send_file(output, attachment_filename=\"database_report.xlsx\", as_attachment=True)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count":None,
   "id": "3c765d68-b1c9-4a68-8274-033cf9ea8e2c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
