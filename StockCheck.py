{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ff983cb5-3c3f-49b1-9aac-61c33e538dd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x224661b8210>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from dash import Dash, dcc, html, Input, Output, State\n",
    "import dash_bootstrap_components as dbc\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "import re\n",
    "import io\n",
    "import xlsxwriter\n",
    "from docx import Document\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "\n",
    "# إعداد الاتصال بقاعدة البيانات باستخدام SQLAlchemy\n",
    "connection_string = \"mssql+pyodbc://PDASYNC:PDASYNC@52.174.138.11/SBDBLIVE2?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes\"\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "# جلب البيانات من قاعدة البيانات\n",
    "query_warehouse = \"\"\"\n",
    "SELECT [BUID],\n",
    "      [WarehouseName],\n",
    "      [ItemID],\n",
    "      [StockByCarton],\n",
    "      [TotalSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverViewbyBUID];\n",
    "\"\"\"\n",
    "\n",
    "query_sales = \"\"\"\n",
    "SELECT [WAREHOUSEID],\n",
    "      [WarehouseName],\n",
    "      [ITEMID],\n",
    "      [StockByCarton],\n",
    "      [AvgSalesByCarton],\n",
    "      [DaysOfStock],\n",
    "      [BrandNameE],\n",
    "      [MasterBrandName],\n",
    "      [ItemNameE],\n",
    "      [BUIDName]\n",
    "FROM [SBDBLIVE2].[dbo].[StockTurnoverView];\n",
    "\"\"\"\n",
    "\n",
    "df_warehouse = pd.read_sql(query_warehouse, engine)\n",
    "df_sales = pd.read_sql(query_sales, engine)\n",
    "\n",
    "# قائمة بأسماء المندوبين والفروع التي نريد إزالتها\n",
    "salesman_names = ['هيثم فاروق فولي', 'اسم مندوب آخر', 'اسم مندوب آخر 2']\n",
    "branch_names = df_warehouse['BUIDName'].unique().tolist()\n",
    "\n",
    "def remove_names(item_name, names_list):\n",
    "    for name in names_list:\n",
    "        # استخدام التعبير المنتظم لإزالة الأسماء بشكل دقيق\n",
    "        item_name = re.sub(r'\\b' + re.escape(name) + r'\\b', '', item_name).strip()\n",
    "    return item_name\n",
    "\n",
    "# معالجة عمود ItemNameE لإزالة أسماء المندوبين والفروع\n",
    "df_warehouse['ItemNameE'] = df_warehouse['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "df_sales['ItemNameE'] = df_sales['ItemNameE'].apply(lambda x: remove_names(x, salesman_names + branch_names))\n",
    "\n",
    "# إعداد واجهة المستخدم باستخدام Dash\n",
    "app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])\n",
    "\n",
    "def generate_progress_bar(row):\n",
    "    days_of_stock = row['DaysOfStock']\n",
    "    if days_of_stock <= 2:\n",
    "        color = 'danger'\n",
    "    elif days_of_stock <= 5:\n",
    "        color = 'warning'\n",
    "    else:\n",
    "        color = 'success'\n",
    "    return html.Div([\n",
    "        html.H6(f\"{row['ItemNameE']} in {row['WarehouseName']}\"),\n",
    "        dbc.Progress(value=days_of_stock, max=10, color=color, className=\"mb-3\", label=f\"{days_of_stock} days\")\n",
    "    ])\n",
    "\n",
    "app.layout = dbc.Container([\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H1(\"Warehouse and Sales Stock Dashboard\"), className=\"mb-2\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H6(\"Analyze and manage warehouse and sales stocks effectively.\"), className=\"mb-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H5(\"Stock Status in Sites\"), className=\"mb-2 mt-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(dcc.Dropdown(\n",
    "            id='buid-dropdown',\n",
    "            options=[{'label': name, 'value': name} for name in df_warehouse['BUIDName'].unique()],\n",
    "            placeholder=\"Select a BUID Name\",\n",
    "        ), width=12)\n",
    "    ]),\n",
    "    dbc.Row(id='warehouse-progress-bars-site', className=\"mt-4\"),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H5(\"Stock Status by Salesman\"), className=\"mb-2 mt-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(dcc.Dropdown(\n",
    "            id='warehouseid-dropdown',\n",
    "            options=[],  # سيتم تحديث الخيارات بناءً على BUID المختار\n",
    "            placeholder=\"Select a Warehouse Name\",\n",
    "        ), width=12)\n",
    "    ]),\n",
    "    dbc.Row(id='warehouse-progress-bars-salesman', className=\"mt-4\"),\n",
    "    dbc.Row([\n",
    "        dbc.Col(html.H5(\"Download Data\"), className=\"mb-2 mt-4\")\n",
    "    ]),\n",
    "    dbc.Row([\n",
    "        dbc.Col(dbc.Button(\"Download as Excel\", id=\"btn-download-excel\", color=\"primary\"), width=4),\n",
    "        dbc.Col(dbc.Button(\"Download as Word\", id=\"btn-download-word\", color=\"primary\"), width=4),\n",
    "        dbc.Col(dbc.Button(\"Download as PDF\", id=\"btn-download-pdf\", color=\"primary\"), width=4)\n",
    "    ]),\n",
    "    dcc.Download(id=\"download-dataframe-xlsx\"),\n",
    "    dcc.Download(id=\"download-dataframe-docx\"),\n",
    "    dcc.Download(id=\"download-dataframe-pdf\")\n",
    "], fluid=True)\n",
    "\n",
    "@app.callback(\n",
    "    Output('warehouse-progress-bars-site', 'children'),\n",
    "    Input('buid-dropdown', 'value')\n",
    ")\n",
    "def update_warehouse_progress_bars_site(selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return []\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    return [generate_progress_bar(row) for _, row in filtered_df.iterrows()]\n",
    "\n",
    "@app.callback(\n",
    "    Output('warehouseid-dropdown', 'options'),\n",
    "    Input('buid-dropdown', 'value')\n",
    ")\n",
    "def update_salesman_dropdown(selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return []\n",
    "    filtered_sales = df_sales[df_sales['BUIDName'] == selected_buid_name]\n",
    "    return [{'label': name, 'value': name} for name in filtered_sales['WarehouseName'].unique()]\n",
    "\n",
    "@app.callback(\n",
    "    Output('warehouse-progress-bars-salesman', 'children'),\n",
    "    Input('warehouseid-dropdown', 'value'),\n",
    "    State('buid-dropdown', 'value')\n",
    ")\n",
    "def update_warehouse_progress_bars_salesman(selected_warehouse_name, selected_buid_name):\n",
    "    if selected_warehouse_name is None or selected_buid_name is None:\n",
    "        return []\n",
    "    filtered_df = df_sales[(df_sales['BUIDName'] == selected_buid_name) & (df_sales['WarehouseName'] == selected_warehouse_name)]\n",
    "    return [generate_progress_bar(row) for _, row in filtered_df.iterrows()]\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"download-dataframe-xlsx\", \"data\"),\n",
    "    Input(\"btn-download-excel\", \"n_clicks\"),\n",
    "    State('buid-dropdown', 'value'),\n",
    "    prevent_initial_call=True,\n",
    ")\n",
    "def func_xlsx(n_clicks, selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    output = io.BytesIO()\n",
    "    writer = pd.ExcelWriter(output, engine='xlsxwriter')\n",
    "    filtered_df.to_excel(writer, sheet_name='Sheet1', index=False)\n",
    "    writer.close()\n",
    "    output.seek(0)\n",
    "    return dcc.send_bytes(output.getvalue(), \"data.xlsx\")\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"download-dataframe-docx\", \"data\"),\n",
    "    Input(\"btn-download-word\", \"n_clicks\"),\n",
    "    State('buid-dropdown', 'value'),\n",
    "    prevent_initial_call=True,\n",
    ")\n",
    "def func_word(n_clicks, selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    document = Document()\n",
    "    document.add_heading('Filtered Data', 0)\n",
    "    for index, row in filtered_df.iterrows():\n",
    "        document.add_paragraph(f\"{row['ItemNameE']} in {row['WarehouseName']} with {row['DaysOfStock']} days of stock\")\n",
    "    output = io.BytesIO()\n",
    "    document.save(output)\n",
    "    output.seek(0)\n",
    "    return dcc.send_bytes(output.getvalue(), \"data.docx\")\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"download-dataframe-pdf\", \"data\"),\n",
    "    Input(\"btn-download-pdf\", \"n_clicks\"),\n",
    "    State('buid-dropdown', 'value'),\n",
    "    prevent_initial_call=True,\n",
    ")\n",
    "def func_pdf(n_clicks, selected_buid_name):\n",
    "    if selected_buid_name is None:\n",
    "        return\n",
    "    filtered_df = df_warehouse[df_warehouse['BUIDName'] == selected_buid_name]\n",
    "    output = io.BytesIO()\n",
    "    c = canvas.Canvas(output, pagesize=letter)\n",
    "    width, height = letter\n",
    "    y = height - 40\n",
    "    for index, row in filtered_df.iterrows():\n",
    "        text = f\"{row['ItemNameE']} in {row['WarehouseName']} with {row['DaysOfStock']} days of stock\"\n",
    "        c.drawString(30, y, text)\n",
    "        y -= 20\n",
    "        if y < 40:\n",
    "            c.showPage()\n",
    "            y = height - 40\n",
    "    c.save()\n",
    "    output.seek(0)\n",
    "    return dcc.send_bytes(output.getvalue(), \"data.pdf\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True, use_reloader=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "4fdc16e8-a1c2-4ff3-ad6f-24a00c0794d3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
